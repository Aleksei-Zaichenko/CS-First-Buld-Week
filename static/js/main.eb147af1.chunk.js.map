{"version":3,"sources":["components/GameBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["operations","GameBoard","props","useState","gameSpeed","setGameSpeed","xValue","setXValue","yValue","setYValue","generations","setGenerations","isGameDisabled","setIsGameDisabled","makeBoard","board","setBoard","x","y","createSquares","rows","passedxValue","key","className","map","colm","onClick","newBoard","produce","boardCopy","toggleCell","style","backgroundColor","disabled","runningRef","useRef","current","runGame","useCallback","b","i","k","neighbors","forEach","newI","newK","setTimeout","console","log","color","Math","floor","random","makeRandomBoard","display","flexDirection","fontSize","type","name","value","onChange","event","target","handleXValueChange","handleYValueChange","handleGameSpeedChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb147af1.chunk.js","sourcesContent":["import React, { useRef, useCallback, useState } from \"react\";\r\nimport produce from \"immer\";\r\nimport \"./cellObject.css\";\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, 0],\r\n  [1, 1],\r\n  [1, -1],\r\n  [-1, 0],\r\n  [-1, -1],\r\n  [-1, 1],\r\n];\r\n\r\nfunction GameBoard(props) {\r\n  const [gameSpeed, setGameSpeed] = useState(500);\r\n  const [xValue, setXValue] = useState(25);\r\n  const [yValue, setYValue] = useState(25);\r\n  const [generations, setGenerations] = useState(0);\r\n  const [isGameDisabled, setIsGameDisabled] = useState(false);\r\n  const [board, setBoard] = useState(() => {\r\n    return makeBoard();\r\n  });\r\n\r\n  function makeBoard() {\r\n    let board = [];\r\n    for (let x = 0; x < xValue; x++) {\r\n      board[x] = [];\r\n      for (let y = 0; y < yValue; y++) {\r\n        board[x][y] = 0;\r\n      }\r\n    }\r\n    return board;\r\n  }\r\n\r\n  function createSquares(rows, passedxValue) {\r\n    return (\r\n      <div key={passedxValue} className=\"row\">\r\n        {rows.map((colm, y) => (\r\n          <button\r\n            key={(passedxValue + 1) * y}\r\n            className=\"individualCell\"\r\n            onClick={() => {\r\n              toggleCell(passedxValue, y);\r\n            }}\r\n            style={\r\n              board[passedxValue][y]\r\n                ? { backgroundColor: \"CornflowerBlue\" }\r\n                : { backgroundColor: \"purple\" }\r\n            }\r\n            disabled={isGameDisabled}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function toggleCell(xValue, yValue) {\r\n    const newBoard = produce(board, (boardCopy) => {\r\n      boardCopy[xValue][yValue] = board[xValue][yValue] ? 0 : 1;\r\n    });\r\n    setBoard(newBoard);\r\n  }\r\n\r\n  function handleStart() {\r\n    setIsGameDisabled(true);\r\n    if (!isGameDisabled) {\r\n      runningRef.current = true;\r\n      runGame();\r\n    }\r\n  }\r\n\r\n  function handleStop() {\r\n    setIsGameDisabled(false);\r\n  }\r\n\r\n  function handleClear() {\r\n    setIsGameDisabled(false);\r\n    setGenerations(0);\r\n    setXValue(25);\r\n    setYValue(25);\r\n    setBoard(makeBoard());\r\n  }\r\n\r\n  function handleRandom() {\r\n    setIsGameDisabled(false);\r\n    setGenerations(0);\r\n\r\n    function makeRandomBoard() {\r\n      let board = [];\r\n      for (let x = 0; x < xValue; x++) {\r\n        board[x] = [];\r\n        for (let y = 0; y < yValue; y++) {\r\n          board[x][y] = Math.floor(Math.random() * 2);\r\n        }\r\n      }\r\n      return board;\r\n    }\r\n\r\n    setBoard(makeRandomBoard());\r\n  }\r\n\r\n  const runningRef = useRef(isGameDisabled);\r\n  runningRef.current = isGameDisabled;\r\n\r\n  const runGame = useCallback(() => {\r\n    if (!runningRef.current) {\r\n      console.log(\"return\");\r\n      return;\r\n    }\r\n    setBoard((b) => {\r\n      return produce(b, (boardCopy) => {\r\n        for (let i = 0; i < xValue; i++) {\r\n          for (let k = 0; k < yValue; k++) {\r\n            let neighbors = 0;\r\n            operations.forEach(([x, y]) => {\r\n              const newI = i + x;\r\n              const newK = k + y;\r\n              if (newI >= 0 && newI < xValue && newK >= 0 && newK < yValue) {\r\n                neighbors += b[newI][newK];\r\n              }\r\n            });\r\n\r\n            if (neighbors < 2 || neighbors > 3) {\r\n              boardCopy[i][k] = 0;\r\n            } else if (b[i][k] === 0 && neighbors === 3) {\r\n              boardCopy[i][k] = 1;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    setGenerations((generations) => generations + 1);\r\n    setTimeout(runGame, gameSpeed);\r\n  }, [gameSpeed, xValue, yValue]);\r\n\r\n  function handleXValueChange(event) {\r\n    setXValue(event.target.value);\r\n    setBoard(makeBoard());\r\n  }\r\n\r\n  function handleYValueChange(event) {\r\n    setYValue(event.target.value);\r\n    setBoard(makeBoard());\r\n  }\r\n\r\n  function handleGameSpeedChange(event) {\r\n    setGameSpeed(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"GameBoard\">\r\n      <p className=\"generationsParagraph\">Current Generation: {generations}</p>\r\n      <div className=\"cellsContainer\">\r\n        {board.map((rows, x) => createSquares(rows, x))}\r\n      </div>\r\n      <div className=\"buttonsContainer\">\r\n        <button\r\n          className=\"controlButton\"\r\n          style={{ backgroundColor: \"#4CAF50\" }}\r\n          onClick={handleStart}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          className=\"controlButton\"\r\n          style={{ backgroundColor: \"#f44336\" }}\r\n          onClick={handleStop}\r\n        >\r\n          Stop\r\n        </button>\r\n        <button\r\n          className=\"controlButton\"\r\n          style={{ color: \"black\" }}\r\n          onClick={handleClear}\r\n        >\r\n          Clear\r\n        </button>\r\n        <button\r\n          className=\"controlButton\"\r\n          style={{ color: \"Cornsilk\", backgroundColor: \"LightSalmon\" }}\r\n          onClick={handleRandom}\r\n        >\r\n          Crazy Random\r\n        </button>\r\n        <form\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            color: \"white\",\r\n            fontSize: \"1.3rem\",\r\n          }}\r\n        >\r\n          <label>\r\n            Number of rows:{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              name=\"xValue\"\r\n              value={xValue}\r\n              onChange={(event) => handleXValueChange(event)}\r\n            />\r\n          </label>\r\n          <label>\r\n            Number of columns:{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              name=\"yValue\"\r\n              value={yValue}\r\n              onChange={(event) => handleYValueChange(event)}\r\n            />\r\n          </label>\r\n        </form>\r\n      </div>\r\n      <div>\r\n        <form>\r\n          <label style={{ color: \"Gainsboro\", fontSize: \"2.5rem\" }}>\r\n            Game Speed:{\" \"}\r\n            <input\r\n              style={{ fontSize: \"2rem\" }}\r\n              type=\"number\"\r\n              name=\"gameSpeed\"\r\n              value={gameSpeed}\r\n              onChange={(event) => handleGameSpeedChange(event)}\r\n            />\r\n          </label>\r\n        </form>\r\n      </div>\r\n      <div>\r\n        <p className=\"rules\">\r\n          1&#41; Any live cell with fewer than two live neighbours dies, as if\r\n          by underpopulation.\r\n          <br /> 2&#41; Any live cell with two or three live neighbours lives on\r\n          to the next generation. <br />\r\n          3&#41; Any live cell with more than three live neighbours dies, as if\r\n          by overpopulation. <br />\r\n          4&#41; Any dead cell with exactly three live neighbours becomes a live\r\n          cell, as if by reproduction.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default GameBoard;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport GameBoard from \"./components/GameBoard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}