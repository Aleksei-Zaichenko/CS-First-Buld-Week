{"version":3,"sources":["components/GameBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["operations","GameBoard","props","useState","gameSpeed","setGameSpeed","xValue","setXValue","yValue","setYValue","generations","setGenerations","isGameDisabled","setIsGameDisabled","makeBoard","board","setBoard","buffer","x","y","createSquares","rows","passedxValue","key","className","map","colm","onClick","newBoard","produce","boardCopy","toggleCell","style","backgroundColor","disabled","runningRef","useRef","current","runGame","useCallback","b","i","k","neighbors","forEach","newI","newK","setTimeout","temp","console","log","gameStatus","generationsGenerator","color","Math","floor","random","makeRandomBoard","display","flexDirection","fontSize","type","name","value","onChange","event","target","handleXValueChange","handleYValueChange","handleGameSpeedChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f0fcb60.chunk.js","sourcesContent":["import React, { useRef, useCallback, useState } from \"react\";\r\nimport produce from \"immer\";\r\nimport \"./cellObject.css\";\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, 0],\r\n  [1, 1],\r\n  [1, -1],\r\n  [-1, 0],\r\n  [-1, -1],\r\n  [-1, 1],\r\n];\r\n\r\nfunction GameBoard(props) {\r\n  const [gameSpeed, setGameSpeed] = useState(500);\r\n  const [xValue, setXValue] = useState(25);\r\n  const [yValue, setYValue] = useState(25);\r\n  const [generations, setGenerations] = useState(0);\r\n  const [isGameDisabled, setIsGameDisabled] = useState(false);\r\n  const [board, setBoard] = useState(() => {\r\n    return makeBoard();\r\n  });\r\n  const [buffer, setBuffer] = useState([board]);\r\n\r\n  function makeBoard() {\r\n    let board = [];\r\n    for (let x = 0; x < xValue; x++) {\r\n      board[x] = [];\r\n      for (let y = 0; y < yValue; y++) {\r\n        board[x][y] = 0;\r\n      }\r\n    }\r\n    return board;\r\n  }\r\n\r\n  function createSquares(rows, passedxValue) {\r\n    return (\r\n      <div key={passedxValue} className=\"row\">\r\n        {rows.map((colm, y) => (\r\n          <button\r\n            key={(passedxValue + 1) * y}\r\n            className=\"individualCell\"\r\n            onClick={() => {\r\n              toggleCell(passedxValue, y);\r\n            }}\r\n            style={\r\n              board[passedxValue][y]\r\n                ? { backgroundColor: \"CornflowerBlue\" }\r\n                : { backgroundColor: \"purple\" }\r\n            }\r\n            disabled={isGameDisabled}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function toggleCell(xValue, yValue) {\r\n    const newBoard = produce(board, (boardCopy) => {\r\n      boardCopy[xValue][yValue] = board[xValue][yValue] ? 0 : 1;\r\n    });\r\n    setBoard(newBoard);\r\n  }\r\n\r\n  function handleStart() {\r\n    setIsGameDisabled(true);\r\n    if (!isGameDisabled) {\r\n      runningRef.current = true;\r\n      runGame();\r\n    }\r\n    let temp = isGameDisabled;\r\n    console.log(\"temo\", temp);\r\n    console.log(isGameDisabled);\r\n    generationsGenerator(isGameDisabled);\r\n  }\r\n\r\n  function handleStop() {\r\n    setIsGameDisabled(false);\r\n    console.log(buffer);\r\n  }\r\n\r\n  function handleClear() {\r\n    setIsGameDisabled(false);\r\n    setGenerations(0);\r\n    setXValue(25);\r\n    setYValue(25);\r\n    setBoard(makeBoard());\r\n  }\r\n\r\n  function handleRandom() {\r\n    setIsGameDisabled(false);\r\n    setGenerations(0);\r\n\r\n    function makeRandomBoard() {\r\n      let board = [];\r\n      for (let x = 0; x < xValue; x++) {\r\n        board[x] = [];\r\n        for (let y = 0; y < yValue; y++) {\r\n          board[x][y] = Math.floor(Math.random() * 2);\r\n        }\r\n      }\r\n      return board;\r\n    }\r\n\r\n    setBoard(makeRandomBoard());\r\n  }\r\n\r\n  const runningRef = useRef(isGameDisabled);\r\n  runningRef.current = isGameDisabled;\r\n\r\n  const runGame = useCallback(() => {\r\n    if (!runningRef.current) {\r\n      return;\r\n    }\r\n    setBoard((b) => {\r\n      return produce(b, (boardCopy) => {\r\n        for (let i = 0; i < xValue; i++) {\r\n          for (let k = 0; k < yValue; k++) {\r\n            let neighbors = 0;\r\n            operations.forEach(([x, y]) => {\r\n              const newI = i + x;\r\n              const newK = k + y;\r\n              if (newI >= 0 && newI < xValue && newK >= 0 && newK < yValue) {\r\n                neighbors += b[newI][newK];\r\n              }\r\n            });\r\n\r\n            if (neighbors < 2 || neighbors > 3) {\r\n              boardCopy[i][k] = 0;\r\n            } else if (b[i][k] === 0 && neighbors === 3) {\r\n              boardCopy[i][k] = 1;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n    setGenerations((generations) => generations + 1);\r\n    setTimeout(runGame, gameSpeed);\r\n  }, [gameSpeed, xValue, yValue]);\r\n\r\n  function generationsGenerator(gameStatus) {\r\n    let m = 0;\r\n    console.log(gameStatus);\r\n    let temp = isGameDisabled;\r\n    console.log(\"tempo\", temp);\r\n    // while (checkForloop) {\r\n    // let newBoard = produce(buffer[m], (boardCopy) => {\r\n    //   for (let i = 0; i < xValue; i++) {\r\n    //     for (let k = 0; k < yValue; k++) {\r\n    //       let neighbors = 0;\r\n    //       operations.forEach(([x, y]) => {\r\n    //         const newI = i + x;\r\n    //         const newK = k + y;\r\n    //         if (newI >= 0 && newI < xValue && newK >= 0 && newK < yValue) {\r\n    //           neighbors += buffer[m][newI][newK];\r\n    //         }\r\n    //       });\r\n    //       if (neighbors < 2 || neighbors > 3) {\r\n    //         boardCopy[i][k] = 0;\r\n    //       } else if (buffer[m][i][k] === 0 && neighbors === 3) {\r\n    //         boardCopy[i][k] = 1;\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // });\r\n    //   setBuffer([...buffer, buffer]);\r\n    //   m++;\r\n    //   console.log(m);\r\n    //   setBuffer([...buffer, board]);\r\n    // }\r\n  }\r\n\r\n  function handleXValueChange(event) {\r\n    setXValue(event.target.value);\r\n    setBoard(makeBoard());\r\n  }\r\n\r\n  function handleYValueChange(event) {\r\n    setYValue(event.target.value);\r\n    setBoard(makeBoard());\r\n  }\r\n\r\n  function handleGameSpeedChange(event) {\r\n    setGameSpeed(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"GameBoard\">\r\n      <p className=\"generationsParagraph\">Current Generation: {generations}</p>\r\n      <div className=\"cellsContainer\">\r\n        {board.map((rows, x) => createSquares(rows, x))}\r\n      </div>\r\n      <div className=\"buttonsContainer\">\r\n        <button\r\n          className=\"controlButton\"\r\n          style={{ backgroundColor: \"#4CAF50\" }}\r\n          onClick={handleStart}\r\n        >\r\n          Start\r\n        </button>\r\n        <button\r\n          className=\"controlButton\"\r\n          style={{ backgroundColor: \"#f44336\" }}\r\n          onClick={handleStop}\r\n        >\r\n          Stop\r\n        </button>\r\n        <button\r\n          className=\"controlButton\"\r\n          style={{ color: \"black\" }}\r\n          onClick={handleClear}\r\n        >\r\n          Clear\r\n        </button>\r\n        <button\r\n          className=\"controlButton\"\r\n          style={{ color: \"Cornsilk\", backgroundColor: \"LightSalmon\" }}\r\n          onClick={handleRandom}\r\n        >\r\n          Crazy Random\r\n        </button>\r\n        <form\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            color: \"white\",\r\n            fontSize: \"1.3rem\",\r\n          }}\r\n        >\r\n          <label>\r\n            Number of rows:{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              name=\"xValue\"\r\n              value={xValue}\r\n              onChange={(event) => handleXValueChange(event)}\r\n            />\r\n          </label>\r\n          <label>\r\n            Number of columns:{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              name=\"yValue\"\r\n              value={yValue}\r\n              onChange={(event) => handleYValueChange(event)}\r\n            />\r\n          </label>\r\n        </form>\r\n      </div>\r\n      <div>\r\n        <form>\r\n          <label style={{ color: \"Gainsboro\", fontSize: \"2.5rem\" }}>\r\n            Game Speed:{\" \"}\r\n            <input\r\n              style={{ fontSize: \"2rem\" }}\r\n              type=\"number\"\r\n              name=\"gameSpeed\"\r\n              value={gameSpeed}\r\n              onChange={(event) => handleGameSpeedChange(event)}\r\n            />\r\n          </label>\r\n        </form>\r\n      </div>\r\n      <div>\r\n        <p className=\"rules\">\r\n          1&#41; Any live cell with fewer than two live neighbours dies, as if\r\n          by underpopulation.\r\n          <br /> 2&#41; Any live cell with two or three live neighbours lives on\r\n          to the next generation. <br />\r\n          3&#41; Any live cell with more than three live neighbours dies, as if\r\n          by overpopulation. <br />\r\n          4&#41; Any dead cell with exactly three live neighbours becomes a live\r\n          cell, as if by reproduction.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default GameBoard;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport GameBoard from \"./components/GameBoard\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GameBoard />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}